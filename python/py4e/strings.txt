string slices
    > s = 'Monty Python'
        s[0:5] - returns Monty (up to not including). Ommiting first or last
        index makes slicing to start from the beginning or go till the end.
        If the first index is greater than or equal to the second the result is
        an empty string

the 'in' operator
    > 'in' operator takes two strings and return True or False if first string
        appears as substring in the second

string methods
    > dir() function shows available methods for an object that is passed as
        argument
    > help() function takes method with dot notation as an arguments and gives
        some simple documentation (f.e. help(str.capitalize))
    > fine() method takes substring as an argument and returns position index in
        the string that method was applied to; second parameter can specify
        where to start a search; returns -1 if didnt find
        f.e. word = 'banana'
             index = word.find('a')
             index_2 = word.find('a', 3)
    > strip() method removes spaces, tabs, or newlines from the beginning and
        end of a string
    > startswith() method return boolean if given string starts with argument
        specified (also returns False if a given string is empty)
    > replace(old, new, count) method returns a copy of the string with all
        occurences of substring old replaced by new; if optional count is
        given, only first count occurences are replaced
    > rfind(sub, start, end) method returns the highest index in the string
        where substring sub is found; optional 'start' and 'end' are
        interpreted as in slice notation; returns -1 on failure
    > rindex(sub, start, end) like rfind, but raises ValueError on failure
    > rsplit(sep=None, maxsplit=-1) method returns a list of words in a string,
        using sep as the delimiter; if maxsplit is given, at most maxsplit
        splits are done, the rightmost ones; if sep is not specified or None,
        any whitespace string is separator.

format operator
    > alows to constract string, replacing parts of the string with the data
        stored in valuables
    > %d - interger, %g - float, %s - string - specifies how second operand
        should be treated
        f.e. camels = 42
             'I have spotted %d camels.' % camels
             'I have spotted 42 camels.'