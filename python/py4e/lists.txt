a list is a sequence
    > elements can be of any type
        f.e. ['spam', 2.0, 5, [10, 20]] - even list within list!
    > empty = [] - create an empty list

lists are mutable
    > 'in' operator check if list contains argument 

traversing a list
    > range(n) - returns a list of indices from 0 to n - 1
    > for loop over empty list never executes the body

list operations
    > '+' operator concatenates lists
    > '*' repeats a list a given number of time
    > result of both operators is single list

list slices
    > t[i:j] - returns a new list including first index up to second
    > t[i:j] = ['x', 'y'] - slice operator on the left side updates multiple
        elements

list methods
    > appent(elem) - adds new element to the end
    > extend(list) - takes a list as argument and appends all elements
    > sort() - arranges elements from low to high
    > pop(i) - modifies the list and returns the element that was removed;
        if index wasn't provided, deletes and returns the last element
    > remove(element) - removes specified element
    > del list[i] - operator, deletes either specified element; can work on
        multiple value (del list[i:j])

lists and string
    > list(str) - function, returns a list that is converted from a string
    > str.split() - method, returns a list of words
    > delimiter = ' '
      delimiter.join(list) - string method, returns a joined list as a string;
        invoked on a delimiter

objects and values
    > a = 'ana'
      b = 'ana'
      a is b - returns True, as Pyhton created only one object, both a and be
        refer to it
    > a = [1, 2, 3]
      b = [1, 2, 3]
      a is b - returns False, as Python alsways creates another distinct list,
        two objects are going to be equivalent, but not identical

list arguments
    > if a list is passed to a function as argument, that funciton gets
        a reference to the list (list is aliased - two variables refer to it);
        assgining values to this parameter will not have effect on argument list
    > important to distinguish methods and functions that modify existing list
        and those creating new ones