What is database
    > https://sqlitebrowser.org/dl/ - download sqlitebrowser
    > Oracle, MySQL, Microsoft SQL Server, PostgreSQL, SQLite
    > SQLite already built into Python

Database concept
    > relational databse model - storing data by rows and columns in tables
        - database contains many tables
        - relation(or table) contains tuples and attributes
        - tuple(or row) - a set of fields that generally represent an "object"
            like a preson or music track
        - attribute(also column or field) - one of possibly many elements of data
            corresponding to the object represented by the row
    > CRUD
        - Create
        - Read
        - Update
        - Delete

Creating a database table
    > db1.py
    > python commands to get started:
        - conn = sqlite3.connect('file_path') - makes a connection to database
        stored in file_path or creates a new one
        - cur = conn.cursor() - cursor is like a file handler (similar to open())
        - now can execute SQL commands using execute() method:
            cur.execute('SQL command')
    > SQLite commands:
        - convention - use upper case for SQL commands and lower for actual data
        - semi colon between commands to run multiple commands at once
        - DROP TABLE IF EXISTS Table_name - removes table if it already exists
            (all contents as well)
        - CREATE TABLE Table_name (title TEXT, plays INTEGER) - creates a table
            named Table_name with a text column named title and integer column
            named plays
        - INSERT INTO Table_name (title, plays) VALUES ('SomeTitle', 15) -
            insert data into table
            (python -  INSERT INTO Table_name (title, plays) VALUES (?, ?), (SomeTitle, 15)
        - DELETE FROM Table_name WHERE plays='15' - deletes entries that match
            criteria (if WHERE is not specified deletes all data in the table)
        - UPDATE Table_name SET plays='4' WHERE title='Robot' - updates all
            entries that match the criteria
        - SELECT * FROM Table_name Where plays=4 - selects entries that match
            the pattern; '*' means all entries, then WHERE specifies which ones
        - SELECT * FROM Table_name ORDER BY plays DESC - same as previous, but also
            orders the output; DESC - means descending order

Basic data modeling
    > the act of deciding how to break up your application data into multiple
        tables and establishing the relationships between the tables
    > design document is called data model
    > http://en.wikipedia.org/wiki/Relational_model
    > basic rule - avoid data duplications
    > SQLite commands:
        - INTEGER PRIMARY KEY - SQL type, that is smth like id number is added
            automatically when new row is added
        - UNIQUE - keyword that indicates to avoid duplications

Contstaints in database tables
    > UNIQUE keyword - can also use UNIQUE clause, UNIQUE(from_id, to_id), to
        enforce unique combination
    > example rule (ignore if):
        cur.execute('INSERT OR IGNORE INTO Table_name (track, count) VALUES (?, 0)', (friend, ))

Retrieve and/or insert a record
    > SQL keywords:
        - INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT UNIQUE - autoincrement means
            we do not pass this value, when adding entries, database does it for
            us; rest selfexplainatory

Three types of keys
    > logical - key that "real world" might use to look up a row (makes sense
        to add UNIQUE  constraint)
    > primary - usually a number that is assinged automatically by the database;
        used to link rows frim different tables together (id field for example)
    > foreign - usually a number that points to the primaty key of an associated
        row in a different table; used to establish relationships between rows
        stored in different tables

Using JOIN to retrieve data
    > JOIN operation links across several tables as part of SELECT operation
    > must tell tge JOIN how to use the kets that make the connection between
        tables using an ON clause
    > connect two tables and show rows that match, example:
        SELECT Album.title. Artist.name from Album join Artist on Album.artist_id = Artist_id
    > to reconstruct the initial table join all tables and add on clause, where
        foreign keys equals primary key, exmaple:
            SELECT Track.title, Artist.name, Album.title, Genre.name from Track join Genre join Album join Artist on Track.genre_id = Genre.id and Track.album_id = Album.id and Album.artist_id = Artist.id
            
Many-to-many relationship
    > 