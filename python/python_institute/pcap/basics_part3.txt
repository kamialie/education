Writing functions in Python
    > def function_name():
        pass
    > function name may later be redefined! careful

Function and environment communication
    > positional parameter passing - technique which assigns the ith element
        argument to the ith fucntion parameter (positional arguments)
    > keyword argument passing - value passed to the parameter are preceded
        by the target parameter's name, for example
            intro(firstname="Luke", lastname="Skywalker")
    > can mix both stylesm but positional passing must go first
    > to set a default value for a parameter extend it with '=' sign followed by
        default value, for example:
            def function_name(parameter="im defualt!", param2=3)
    > now you can omit passing this parameters to the function

Returning a result from fucntion
    > return keyword inside functions body causes immidiate termination of
        function's execution; will return a value if followed by expression;
        implicitly executed at the end of function
    > None keyword, doesnt hold any value, can be used:
        - to assign to variable
        - for comparison to diagnose internal state
    > if a fucntion doesnt return a value using return expression clause, it
        is assumed that it implicitly returns None

Scopes in Python
    > variable existing outside a function has a scope inside this function,
        excluding those which define a variable of the same name(outside
        variables are only supported for reading; writing causes the creation
        of a new variable)
    > changing the parameter's value doesnt propogate outside the function
        (same for lists, etc), but if you modify a list identified by the
        parameter, the list outside a function will reflect the change

Tuples and dictionaries
    > tuples can be created just from values separated by commas or also enclosed
        in parenthesis, for example
            tuple1 = (1, 3, 4)
            tuple2 = 1, 3, 4
            tuple = () - creating an empty tuple
            tuple = 1, or tuple = (1,) - creating one element tuple (commas is
                required)
    > indexing and slicing work with tuples same way as with lists
    > any operations (del, append, assigning new value at index) can not be
        applied to tuples as they are immutable
    > +, *, in, not int - all work with tuples as well
    > tuples elements can be variables and expressions (if on the right side)
    > dictionary creation example:
        dct = {'one':1, 'two':2}
        dct = {}
    > getting a value by passing a key:
        print(dct['one'])
    > in, not in 
    > keys() method returns a list of all keys in dictionary - can be passed to
        for loop to traverse a dictionary (pass result to function sorted() to
        sort the keys); passing dictionary name to for loop works just like
        passing with keys() method
    > items() returns a list of tuples of key-values pairs, example
        for k,v in dct.items():
            print(k, v)
    > values() returns a list of values
    > removing a key (thus also a value), example:
        del dct[key]