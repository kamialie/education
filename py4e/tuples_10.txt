tuples - sequence of values of any type that are indexed by integers(also
    comparable and hashable, so they can be sued as keys in dictionaries)
    > are immutable
    > t = (a,) - create a tuple or use tuple function
    > if the argument of tuple() function is a sequence (string, list, tuple)
        the result is a tuple with the elements of the sequence

comparing tuples
    > Python start with comparing first elements and so on; sort function works
        the same way
    > DSU pattern:
        - Decorate - a sequence by building a list of tuples with one or more
            sort keys preceding the elements from the sequence
        - Sort  - the list of tuples the Python build-in sort
        - Undecorate - extracting the sorted elements of sequence

tuple assignment
    > tuple on the left side of assignment - multiple assignments at the same
        time 
        m  = ['have', 'fun']
        x, y = m or (x, y) = m
    > swap
        a, b = b, a

dictionaries and tuples
    > dictionary method items() returns a list of tuples
    > can therefore sort the list by keys

multiple assignment with dictionaries
    > create a list if value-key pairs for futher sort
        for key, value in d.items():
           l.append((value, key)) 

using tuples as keys in dictionaries
    > for last, first in dictionary:
        printf(first, last, dictionary[last, first])
    > (last, first) - is a tuple

extra:
    > sorted(), reversed() methods return new modified tuples (since they are
        immutable cant change existing)

video bonus:
    >   c = {'a':10, 'b':1, 'c':22}
        print(sorted([(v,k) for k,v in c.items()]))
    > returns sorted by values list