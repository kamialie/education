1) Delegates
    > keyword - delegate
    > like function pointer in C
    > example in delegates_video_example folder
    > good habit to clear out delegates after you are done with them
    > f.e.
        public delegate void PrintMessage(string message); // PrintMessage is a type, overall method signature
        public PrintMessage Message; // creating a variable of that type, delagate defined
        Message += PrintToNetwork; // assign methods to delagate variable (subscribe delagate); unsubscribe with '-='
        Message("Hello World!") // call delegate like a regular method
        

2) Anonymous delegate
    > example in delegates_video_example folder
    > f.e.
        Message += delagate(string message)
        {
            //code
        }
    > f.e.
        PrintMessage myDelegate = delegate(string message) // must provide delegate type, as compiler cant figure out Anonymous type
        {
            //code
        }
        Message += myDelegate; // no can further delete delegate since we have a reference to it

3) Func and Action
    > delegate construct provided by .NET that allows to create a delegate
        without providing it's type
    > Action - delegate that returns nothing; generic Action type should match delegate type; if no parameters needed, simply ignore
        Action<int string> Printer  = delegate (int number, string msg)
        {
            for (int i=0; i < number; i++)
            {
                Print(msg);
            }
        }
    > Func - delegate that returns smth, last generic type is the return type of delegate
        Func<int int> Multiplier = delegate(int number)
        {
            return number * number;
        }

4) Events
    > https://csharpindepth.com/Articles/Events
    > keyword - event
    > f.e.
        public delegate void BookAdded(); // define delegate type
        public event BookAdded onBookAdded; // create an event which takes delegates of type BookAdded 
        // subscribe delegates or listeners

5) Lambda
    > => lambda operator
    > f.e.
        (int x) =>
        {
            return x + 1;
        };
    > started with:
        Func<int, int> lambda = (int x) =>
        {
            return x + 1;
        };
    > to:
        Func<int, int> lambda = x => x + 1;
    > Predicate argument - means lambda is needed