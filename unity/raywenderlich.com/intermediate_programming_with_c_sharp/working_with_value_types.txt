Value types - ints, bool, double, float...

1) Structs
    > example:
        struct City // generally name starts with capital letter
        {
            public string Name; // public key word - anyone can access
            public int Size; // capital case - let anyone know field is public, lower case means private
            public string Location;
        }
        var myCity = new City();
        myCity.Name = "NY" // access field(member, property) of a structure, by default are private

2) Methods
    > example:
        struct Point
        {
            public int X; //
            public int Y;

            public void AddPoint(Point point) // method with parameter point, method names start with capital case
            {
                X += pount.X;
                Y += point.Y;
            }

            point.AddPoint(pointB); //calling a method

    > another example
        struct BookReview
        {
            private string name;
            private int score;

            public void SetName(string name)
            {
                this.name = name; // keyword this makes it refer to name field, instead of parameter
            }
            public string GetName()
            {
                return name;
            }
        }

3) Tuples
    > example
        (string, int) response = ("Same", 15) // define and set values to tuple
        respone.Item1; // access values
        respone.Item2;

        or

        (string, int) respone = (Name: "Sam", Age:15) // define fields
        respone.Name; // access through fields
        respone.Age;
    
    >another example
        struct WebService
        {
            public (Student student, int[] grades) GetStudentProfile(int id) // defined a tuple
            {
                return (new Student(), new int[] {40, 50, 12});
            }
        }
        somewhere in main...
        var service = new WebService();
        var data = service.GetStudentProfile(100);
        data.student.FirstName // access tuple then value in the Student structure
        data.grades[0] // access another field in tuple then first element in array

4) Properties (getters and setters)
    > example
        struct Monster
        {
            public string Name { get; set; } // set variable with properties
            public bool DoubleDamage { get; set; }

            public int Damage
            {
                get // custom getters (override)
                {
                    if (DoubleDamage)
                    {
                        return _damage * 2;
                    }
                    return _damage;
                }
                set
                {
                    _damage = value;
                }
            }
        }

            private int _damage; // backing value (ask about it?)
