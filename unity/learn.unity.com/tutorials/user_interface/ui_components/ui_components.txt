1) UI Canvas
    > controls how group of ui elements will be rendered
    > all ui elements must be children of canvas
    > render modes:
        - screen space overlay - feels entiry screen automatically and is
            autoadjusted based on current screen (size setting are not available);
            Overlays everything on the screen
        - screen space camera - very similar to the previos one, lets specify
            specific camera that will render the canvas (specific setting can be
            appleid); most common - perspectic camera - to give ui a feeling of
            depth, canvas fills camera's viewport automatically
        - world space - renders ui elements in scene volume (could be static
            object in the scene or mobile labels following a player);
            event camera is required to receive events and determine which camera
            will be used to detect events like clicking (usually main camera);
    > canvas elemets are rendered in a top-down order
    > pixel perfect checkbox - ui elements will be adjusted to the nearest pixel,
        which can sharpen the look in some cases

2) Rect Transform
    > all UI elements have Rect Transform instead of usual transform of 3D objects
    > UI element is anchored to it's parents Rect Transform
    > editing
        - holding shift key will resize UI element proportionaly
        - near corners (outside) can rotate the element
        - rotations are done according to pivot point: click and drag blue
            circle in the middle (change to Pivot in Center/Pivot toggle)
    > anchor point is by default the middle of parent object; position is relative
        to that anchor point; anchors (four correspoding to four corners of
        a rectangle) are within the bounds of parent object; anchor min, max
        values are relative to parent's size and are absolute (normalized from
        0 to 1, 0,0 is lower left corner); distance from anchors to object's
        corners is fixed
        common cases of placement:
            - corners of an object - stretch will maintain and will take the
                same percentage area of the parent
            - corners of a parent - fixed border
            - particular side of a parent - stretching either horizonally, but
                not vertically or vice versa
            !- testing can be done while object is selected, parent comes back
                after transformations
        holding shift when positioning anchors will also change object's size
    > pivot point is in boundaries of object scaled for 0 to 1, 0 0 being lower
        left corner
    > resizing doesnt change items related to UI element (font size, etc);
        negative values makes element invisible
    > scaling effects all items of UI element, can also flip it round, when
        fiven negative values
    > blueprint mode - as if object wasnt rotated and scaled
    > raw edit mode - changing anchors, pivot point, etc also changes the object

3) UI Button
    > requires an image scripts and button script
    > button script fields:
        - interactable - weither button is accepting input
        - transition modes:
            > none - no additional states, no transitions
            > color tint (default)
            > sprite swap - requires different sprites (images for each state
                and swaps them when each state occures)
            > animation - allows each state to be fully animated using unity
                animation system
                - Window->animation (or Cmd+6) - to access animation editing
                    window
                - press record (red circle) and apply any changes then press
                    stop recording (red circle)
                - several buttons can share one animator controller
        - target graphic - image component to be tinted, in almost all cases is
            the image component attached to the button
        - highlighted state - when pointer is hovering over the button element
            or been selected by ketboard
        - pressed state - button is being held down (not released)
        - disabled state - when button is not interactable
        - color multiplier - multiplies the tint color for each state by its
            value (used for brightening colors - whos values is less than white
            or alpha channel is less than max)
        - fade duration (is seconds) - the transition takes between states
    > EventSystem object is automatically created when canvas is added;
        When even system detects press and a release of the same button element
        it will process a click and the On Click event will be called; Button
        element has built-in On click functions lists - eligible function to be
        called must be public, of void return type and have 1 or no parameters
        (float, int, string, bool, or Object type)
    > Additional events can be detected like pointer enters or exit the button
        area, but this needs an additional component to be attached;

4) UI Image
    > image script fields:
        - source image - sprite that is used(when none is selected, color is used)
        - color - color multiplied to the color of the sprite (can be used for
            fading or tinting a sprite)
        - material (none ny default) - to add properties of a shader on the image
            (texture property of a material will be ignored); for UI element
            Shader->uGUI
        - image types:
            - simple - sprite will stretch to fit rect transform's size; preserve
                aspect option - image will be as large as it can be within it's
                bounding rect, but maintaining its aspect ration it was imported
                with (preserves original proportions); set native - revert to
                original size
            - sliced - image will be displayed using 9 sliced method; only center
                section is stretched allowing scaling without distortion of the
                edges; fill center option - render or not center slice
            - tiled - tiles the source image starting from the lower-left corner
            - filled - allows to show a proportion of the image defined by the
                Fill amount property; method and origine defines the point and
                a way an image will fill the space

5) UI Text
    > if text is too large it wont be displayed unless overflow setting is used
        (separate vertical and horizonal options)
    > best fit - makes text as large or as small to fit available rect
    > rich text is for text markup (like html tags)

6) UI Events and Event Triggers
    > Event System script:
        - first selected - specified ui object will be selected when scene is loaded
    > Standalone Input Module script:
        - input axis, submit, cancel buttons are added by default to the input
            manager
        - input actions per second - allowed number of actions per second, means
            there will be a corresponding delay after action
    > to catch specific event that is not listed on a component by default use
        the Event Trigger component

7) UI Slider

8) UI Transition

9) UI ScrollRect

10) UI Scrollbar

11) UI Mask