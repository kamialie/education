6.2 Arrays
    > array is a group of cells that have the same name and type

6.3-4 Array declaration, examples
    > int c[12]
      char str[10]
    > array declaration and initialization
        int n[5] = {5, 3, 5, 1, 2}; 
        int n[10] = {0}; - the rest of elements are going to initialize to zero
            arrays do not automatically initialize to zero - need to set
            at least the first value
    > another way to declare, initialize
        int n[] = {1, 3, 4, 1}; - final array will have a size of number of
            elements
    > scanf:
        char string[20];
        scanf("%s", string); - since string is already the address to the first
            cell, there is no need for '&' sign
        gets values till it meets a whitespace(?)
    > static arrays automatically initialized with zeros
        ??? static vs automatic arrays

6.5 Passing array to a function
    > arrays created by array[] operation would be passed to function by
        address - modifications made in that function will affect initial array,
        whereas f.e. *array = "hello" will cause bus error, as this string was
        created as static literal
    > distinct elemets of the array are still passed to calling function by
        values
    > void fun(int array[]) - example for an array as a parameter (no need for size
        specifier, it will be ignored anyways)
    > since array parameter passing imitates passing by address, const keyword
        may be used to double-check that calling function doesn't change values
        of initial array

6.6 Sorting arrays
    > bubble sort ;)

6.7 Example: computing average, median... using arrays

6.8 Search in arrays
    > binary_search_example.c

6.9 Arrays inside arrays
    > can be declated and instantiated at the same time:
        int b[2][2] = {{1, 2} , {3, 4}}
        if not enough inital values were passed, the rest initialized to zero
    > more initialization examples:
        int array1[2][3] = {{1, 2, 3}, {4, 5, 6}} // initializes all values
        int array2[2][3] = {1, 2, 3, 4, 5, 6} // first initialized first array
            then second, the rest to zeros
        int array3[2][3] = {{1, 2}, {4}} // initializes 2 values in first array
            rest to zeros, one values in second rest to zeros
    > when passing as a parameter index sizes starting from second must be
        explicitely stated(thus compiler knows how to get to element that is
        bypass number of blocks):
        print_array(int array[][3]);
    > passing array argument with one index (while its array inside array) will
        pass one of the inside arrays, since elements of outer arrar are
        addresses:
        grades[STUDENST][CLASSES];
        average(int grades[student]);
    > in C it is possible to have pointers outside array
    > good habit to initialize array with static, so it doesnt get destroyed
        on every exit from that function (static array are initialized with zeros
        if not explicitely initialized - only once)