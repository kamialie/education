If and else
    > if else clause
    > nesting
    > cascade - else if

More types
    > modifiers:
        - long
        - short
        - unsigned
    > literal of type long:
        - literal values goes beyond the acceptable range of int
        - letter L or l is appended to the literal
    > type double - increased accuracy compared to float (32 to 64 bits)
    > type bool - true or false values(keywords), exclamation mark in front
        negates the variable state; special type of int

Loops
    > while loop
    > do while loop
    > for loop:
        - initiator of the counter
        - checking of the condition
        - modification of the counter
    > if any of the for loop components is ommitted, it is assumed to be 1

Boolean algebra and computer logic
    > logical operators - &&, ||, !
    > cant be used in abbreviated from - operator=
    > bitwise operators - & (conjunction), i (disjunction), ~ (negation),
        ^ (exclusive or) - arguments must be integers (int, long, short or char);
        can be used in abbreviated forms
    > in two's complement notation the role of the sign bit is played by the
        highest bit - if its equal to 1, the value is treated as negative
    > shifting operators - >>, << - can be used as shortcuts as well

Switch
    > first switch expression is evaluated, then matching case is searched from
        top to bottom; if case found and break is made, switch terminates,
        otherwise all following statements are executed until break is met or
        until the end:
        switch (i)
        {
            case 1: statement; break;
            case 2: statement; break;
            case 3: statement; break;
            default: statement;
        }

Vectors (arrays)
    > int numbers[5] - declare an array of 5 elements of type int (all elements
        must be the same type)
    > reverse elements in an array of size n:
        for (int i = 0; i < n / 2; i++)
        {
            temp = numbers[i];
            numbers[i] = numbers[n - i]
            numbers[n - i] = numbers[temp]
        }

Initiators
    > int vector[5] = {0, 1, 2, 3, 4} - assign initial values to an array; not
        specialized elements will be assigned to 0; if size is ommitted,
        automatically assume that the length is the number of elements provided

Not only ints
    > arrays can be of any type

Multidimensional arrays
    > int chessboard[8][8] - declaration of two-dimensional array (matrix)
    > no limit of the array dimension's

Structures
    > can contain any number of elements of any type; each elements is called a
        field and identified by name (must be unique)
    > structure declaration:
        struct STUDENT{
            string name;
            float time;
            int recent_chapter;
        };
    > struct STUDENT str1 or STUDENT str2 - two ways of declaring variables
    > str1.time - selector, left side - structure, right - field
    > declaring multiple structs at once:
        struct DATE{
            int year, month, day;
        } DateOfBirth, Visits[100];
    > declaring without a tag is also possible
        struct {
            int year, month, day;
        } someData;
    > structure can be a field inside another structure

Structure declaration and initialization
    >  structure field names can overlap structure tag
    > also compiler might not let you to use the same tag for structure and a
        variable
    > struct DATE data = {2012, 12, 21}; - initialize values at the time of
        declatation; not specified will be assigned zeros (fields in the order
        they appear); if inner initializer is complete, inner curly brackets can
        be ommitted