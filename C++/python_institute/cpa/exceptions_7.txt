To err is to human
    > EOF - symbol indicating no more data to process, end of file:
        ^D [Ctrl-D] - Unix/Linux
        ^Z [Ctrl-Z] - Windows
    > cin coupled with >> operator returns a reference to itself; if there is 
        no data in input stream or the data is invalid, the cin stream returns 
        a null reference
    > exception - base for all exceptions, both predefined and user-defined:
        - logic_error - exceptions connected to program logic (algorithm,
            implementation, data validily, cohesion); thrown at a higher level
            of program abstraction
        - runtime_error - unexpected accidents(for example lack of memory)
        #include <exception> - needed to make use of classes above; identifiers
        are accessible in std namespace
    > exception class defines only the following:
        - constructor
        - virtual destructor - originally empty
        - virtual function "what" - returns C-style string describing the cause
            and nature of exception:
                virtual char* what()
    > division by zero in C++ doesn't throw an exception
    > try block marks part of the code in which exceptions may occur:
        try {
            ...
        }
    > catch block catches the specified exception, can be either litaral (int, 
        string) or by identifying the class it belongs to (or any other class 
        derived from the exception class?):
            catch (string &anyproblem) {...}
            catch (exception &anyproblem) {...}
    > throw keyword - throws a literal? or an object of a class as an exception;
        need to specify constructor in later case:
            throw 999;
            throw string("BYE BYE");

Throw statement in detail
    > variable inside catch block is local (automatic) variable - hides former
        declaration:
            string str;
            try {
                throw string("");
            } catch (string &str) {...}
    > throw statement causes a function to execute its epilogue (cleaning
        procedure); throw is obligated to throw a value
    > throw Class("exception") - causes a creation of a new object of class Class;
        appropriate constructor is called before the function ends its life(ends
        its life only in appropriate catch block); 
    > function, which throws an exception, may (doesn't have to) specify types
        of entities being thrown(may as well be part of declaration in header):
            void fun(void) throw (x1, x2...) - indicates that function throws
                exceptions of type x1,x2...; empty parethesis is a promise that
                function does not throw exceptions