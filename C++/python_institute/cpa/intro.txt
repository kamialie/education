Books and resources
    > "The C++ Programming Language" Bjarne Stroustrup
        - 
    > "Effective C++" Scott Meyers
        - https://www.amazon.com/gp/product/0321334876?ie=UTF8&tag=aristeia.com-20&linkCode=as2&camp=1789&creative=9325&creativeASIN=0321334876

First program
    > example:
        #include <iostream>
        using namespace std;
        int main(void)
        {
            cout << "first program";
            return (0);
        }
    > namespace - abstract container created to hold a logical grouping of unique
        entities(blocks); all elements of the standard C++ library are declared
        inside std(have to include outside any function at the top of the file)
    > to compile run "g++ <program name"

Integer values, integer variables and comments
    > for octal number precede with zero - 0123, for hexadecimal precede with
        zero x - 0x123
    > block comments can't be nested

Numbers and their operators
    > 3e10 or 3E10 - scientific notation, exponent must be integer
    > converting from float to int simpty cuts decimal part
    > division by zero return inf (infinitive)???

Characters
    > char Character;  - declare a variable to store a single character;
        to assign value either put character in single quotes or non-negative
        integer (corresponding character will be assigned)
    > Character = '\47' - followed by one or two octal digits - will be treated
        as an ASCII value (first translated into decimal); '\x27' - treated as
        hexadecimal number
    > char type is treated as special type of int type - char value can be
        assigned to int variable and vice versa - char type can be subject to
        the same operators as the data of type int:
        Char = 'A';
        Char += 32;

Flow control
    > logical operators - ==, !=, >, <, >=, <=
    > "true" is assigned as 1 to int variable, "false" - 0
    > if (true_or_not) do_this_if_true; - single instruction example
    > if (true_or_not)
      {
          do_this_if_true;
          do_this_if_true_1;
      } - multiple instructions example
    > K & R style (Kernighan, Ritchie)

Input and output
    > '<<' - insertion operator, inserts a string of characters into the character
        device
    > cout - standard output stream which outputs on the screen
    > simple example:
        int sum = 441;
        cout << sum;
    > multiple argument example:
        cout << "total sum is " << sum;
    > expression is a valid cout element too
    > manipulator - switches the stream to work on a different mode (function
        that changes one of the output stream's properties - basefield)
        - hex - changes th stream to hexadecimal mode:
            cout << "number is hex << hex << byte
        starts its work from the point it was placed at and continues even after
        the end of the cout statement - finishes ony with another manipulator
        canceling  its action; manipulator name may be in conflict with variable,
        may be fixed with namespace
    > dec (as in decimal) is a default manipulator, oct (as in octal) switches
        to octal
    > setbase(positive_integer) - manipulator, which directly instructs the
        stream on what base to use (three cases before were special cases);
        requires header file iomanip (special cases do not)
        #include <iomanip>
        cout << stebase(16) << number;
    > cout is able to recognize the actual type of its elements:
        char Char = 'X';
        cout << Char << " " < (int)Char;
    > endl manipulator works just like adding '\n'
    > float value representation can be switched between fixed and scientific
        by manipulators: fixed, scientific; default - automatic
    > '>>' - extraction operator
    > cin - need explicitely specify the variable that can store the data
    > cin recognized the input: int is converted through smth like atoi, string
        as string, character - first entered character is saved